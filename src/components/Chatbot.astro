---
import { getLangFromUrl } from '@/i18n/utils';
import { ui, defaultLang } from '@/i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = (key: keyof (typeof ui)[typeof defaultLang]) => ui[lang][key] || ui[defaultLang][key];
---

<div id="chatbot-container" class="chatbot-container">
  <!-- Botón flotante para abrir el chat -->
  <button id="chatbot-toggle" class="chatbot-toggle" aria-label="Abrir chat">
    <img src="/avatar.png" alt="Chatbot Avatar" class="chatbot-avatar" />
    <div class="chatbot-indicator"></div>
  </button>

  <!-- Ventana del chat -->
  <div id="chatbot-window" class="chatbot-window">
    <!-- Header del chat -->
    <div class="chatbot-header">
      <div class="chatbot-header-info">
        <img src="/avatar.png" alt="Chatbot Avatar" class="chatbot-header-avatar" />
        <div>
          <h3 class="chatbot-title">{t('chatbot.title')}</h3>
          <span class="chatbot-status">{t('chatbot.status')}</span>
        </div>
      </div>
      <div class="chatbot-header-actions">
        <button id="chatbot-clear" class="chatbot-clear" aria-label="Nueva conversación" title="Nueva conversación">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 6h18"></path>
            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
            <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
          </svg>
        </button>
      <button id="chatbot-close" class="chatbot-close" aria-label="Cerrar chat">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      </div>
    </div>

    <!-- Área de mensajes -->
    <div id="chatbot-messages" class="chatbot-messages">
      <div class="message bot-message">
        <div class="message-content">
          <div class="bot-info" style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">
            <img src="/avatar.png" alt="Daniel GPT" style="width: 20px; height: 20px; border-radius: 50%; object-fit: cover;" />
            <span style="font-size: 12px; font-weight: 500; color: var(--primary-text);">Daniel GPT</span>
          </div>
          <p>{t('chatbot.welcome')}</p>
        </div>
      </div>
    </div>

    <!-- Botones de acción rápida -->
    <div class="chatbot-quick-actions">
      <button class="quick-action-btn" data-action="about">
        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
          <circle cx="12" cy="7" r="4"></circle>
        </svg>
        {lang === 'es' ? 'Sobre Daniel' : 'About Daniel'}
      </button>
      <button class="quick-action-btn" data-action="schedule">
        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
          <line x1="16" y1="2" x2="16" y2="6"></line>
          <line x1="8" y1="2" x2="8" y2="6"></line>
          <line x1="3" y1="10" x2="21" y2="10"></line>
        </svg>
        {lang === 'es' ? 'Agendar entrevista' : 'Schedule interview'}
      </button>
      <button class="quick-action-btn" data-action="availability">
        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"></circle>
          <polyline points="12,6 12,12 16,14"></polyline>
        </svg>
        {lang === 'es' ? 'Ver horarios' : 'Check availability'}
      </button>
    </div>

    <!-- Área de entrada -->
    <div class="chatbot-input-area">
      <div class="chatbot-input-container">
        <input 
          type="text" 
          id="chatbot-input" 
          class="chatbot-input" 
          placeholder={t('chatbot.placeholder')}
          maxlength="500"
        />
        <button id="chatbot-send" class="chatbot-send" aria-label="Enviar mensaje">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="22" y1="2" x2="11" y2="13"></line>
            <polygon points="22,2 15,22 11,13 2,9"></polygon>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { getLangFromUrl } from '@/i18n/utils';

  // Clase del chatbot de entrevistas
  class InterviewChatbot {
    private apiUrl: string;
    private conversationId: string | null;

    constructor(apiUrl: string) {
      this.apiUrl = apiUrl;
      this.conversationId = localStorage.getItem('conversationId') || null;
    }

    async sendMessage(message: string, userId: string | null = null) {
      try {
        const response = await fetch(`${this.apiUrl}/chat`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message,
            conversationId: this.conversationId,
            userId
          })
        });

        const data = await response.json();
        
        if (response.ok) {
          // Guardar conversationId para futuras interacciones
          if (data.conversationId) {
            this.conversationId = data.conversationId;
            if (this.conversationId) {
              localStorage.setItem('conversationId', this.conversationId);
            }
          }
          
          return {
            success: true,
            reply: data.reply,
            conversationId: data.conversationId,
            functionResults: data.functionResults
          };
        } else {
          throw new Error(data.error || 'Error sending message');
        }
      } catch (error) {
        console.error('Error:', error);
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }

    async getHistory() {
      if (!this.conversationId) {
        return { success: false, error: 'No conversation ID' };
      }

      try {
        const response = await fetch(`${this.apiUrl}/history/${this.conversationId}`);
        const data = await response.json();
        
        return response.ok 
          ? { success: true, messages: data.messages }
          : { success: false, error: data.error };
      } catch (error) {
        return { 
          success: false, 
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    }

    clearConversation() {
      this.conversationId = null;
      localStorage.removeItem('conversationId');
    }

    // Método público para verificar si hay conversación activa
    hasConversation(): boolean {
      return this.conversationId !== null;
    }
  }

  document.addEventListener('astro:page-load', () => {
    const chatbotContainer = document.getElementById('chatbot-container') as HTMLElement;
    const chatbotToggle = document.getElementById('chatbot-toggle') as HTMLButtonElement;
    const chatbotWindow = document.getElementById('chatbot-window') as HTMLElement;
    const chatbotClose = document.getElementById('chatbot-close') as HTMLButtonElement;
    const chatbotClear = document.getElementById('chatbot-clear') as HTMLButtonElement;
    const chatbotInput = document.getElementById('chatbot-input') as HTMLInputElement;
    const chatbotSend = document.getElementById('chatbot-send') as HTMLButtonElement;
    const chatbotMessages = document.getElementById('chatbot-messages') as HTMLDivElement;
    const quickActionBtns = document.querySelectorAll('.quick-action-btn') as NodeListOf<HTMLButtonElement>;

    let isOpen = true;
    let isLoading = false;

    // Inicializar chatbot con tu API
    const chatbot = new InterviewChatbot('https://tui6gzcxaa.execute-api.us-east-2.amazonaws.com/prod');

    // Aplicar estado abierto por defecto
    chatbotWindow.classList.add('open');
    chatbotToggle.classList.add('active');
    
    // Enfocar el input del chat ya que está abierto por defecto
    chatbotInput.focus();

    // Obtener traducciones
    const lang = getLangFromUrl(new URL(window.location.href));
    const translations = {
      en: {
        loading: 'Typing...',
        error: 'Sorry, an error occurred. Please try again.',
        newConversation: 'New conversation started!'
      },
      es: {
        loading: 'Escribiendo...',
        error: 'Lo siento, ocurrió un error. Por favor intenta de nuevo.',
        newConversation: '¡Nueva conversación iniciada!'
      }
    };

    // Función para abrir/cerrar el chat
    function toggleChat() {
      isOpen = !isOpen;
      chatbotWindow.classList.toggle('open', isOpen);
      chatbotToggle.classList.toggle('active', isOpen);
      
      if (isOpen) {
        chatbotInput.focus();
      }
    }

    // Función para agregar mensaje
    function addMessage(content: string, isBot = false, functionResults: any[] | null = null, isError = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${isBot ? 'bot-message' : 'user-message'}`;
      
      // Crear el contenido del mensaje
      const messageContent = document.createElement('div');
      messageContent.className = 'message-content';
      if (isError) messageContent.classList.add('error');
      
      if (isBot) {
        // Agregar avatar y nombre del bot
        const botInfo = document.createElement('div');
        botInfo.className = 'bot-info';
        botInfo.style.cssText = `
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 6px;
        `;
        
        const avatar = document.createElement('img');
        avatar.src = '/avatar.png';
        avatar.alt = 'Daniel GPT';
        avatar.style.cssText = `
          width: 20px;
          height: 20px;
          border-radius: 50%;
          object-fit: cover;
        `;
        
        const botName = document.createElement('span');
        botName.textContent = 'Daniel GPT';
        botName.style.cssText = `
          font-size: 12px;
          font-weight: 500;
          color: var(--primary-text);
        `;
        
        botInfo.appendChild(avatar);
        botInfo.appendChild(botName);
        messageContent.appendChild(botInfo);
      }
      
      const messageParagraph = document.createElement('p');
      messageParagraph.textContent = content;
      
      // Aplicar estilos directamente si es necesario
      if (isBot) {
        messageParagraph.style.cssText = `
          background: var(--hover-background);
          color: var(--black-text);
          border-radius: 18px;
          border-bottom-left-radius: 6px;
          padding: 12px 16px;
          margin: 0;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
          position: relative;
        `;
        
        // Agregar cola de burbuja
        const tail = document.createElement('div');
        tail.style.cssText = `
          position: absolute;
          left: -8px;
          bottom: 0;
          width: 0;
          height: 0;
          border: 8px solid transparent;
          border-right-color: var(--hover-background);
          border-left: 0;
          border-bottom: 0;
        `;
        messageParagraph.appendChild(tail);
      } else {
        messageParagraph.style.cssText = `
          background: var(--projects-active);
          color: white;
          border-radius: 18px;
          border-bottom-right-radius: 6px;
          padding: 12px 16px;
          margin: 0;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
          position: relative;
        `;
        
        // Agregar cola de burbuja
        const tail = document.createElement('div');
        tail.style.cssText = `
          position: absolute;
          right: -8px;
          bottom: 0;
          width: 0;
          height: 0;
          border: 8px solid transparent;
          border-left-color: var(--projects-active);
          border-right: 0;
          border-bottom: 0;
        `;
        messageParagraph.appendChild(tail);
      }
      
      messageContent.appendChild(messageParagraph);
      
      // Agregar resultados de funciones si existen
      if (functionResults && Array.isArray(functionResults) && functionResults.length > 0) {
        const functionResultsDiv = document.createElement('div');
        functionResultsDiv.className = 'function-results';
        functionResultsDiv.style.cssText = `
          margin-top: 8px;
          padding: 8px 12px;
          background: rgba(59, 130, 246, 0.08);
          border-radius: 12px;
          font-size: 11px;
          border: 1px solid rgba(59, 130, 246, 0.15);
        `;
        
        functionResults.forEach((result: any) => {
          if (result.function === 'schedule_interview' && result.result.success) {
            const resultDiv = document.createElement('div');
            resultDiv.className = 'function-result success';
            resultDiv.style.cssText = `
              display: flex;
              align-items: center;
              gap: 6px;
              margin-bottom: 4px;
              color: #059669;
            `;
            
            resultDiv.innerHTML = `
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              ${lang === 'es' ? 'Entrevista agendada' : 'Interview scheduled'}: ID ${result.result.interviewId.substring(0, 8)}...
            `;
            
            functionResultsDiv.appendChild(resultDiv);
          } else if (result.function === 'get_available_slots') {
            const resultDiv = document.createElement('div');
            resultDiv.className = 'function-result info';
            resultDiv.style.cssText = `
              display: flex;
              align-items: center;
              gap: 6px;
              margin-bottom: 4px;
              color: #2563eb;
            `;
            
            resultDiv.innerHTML = `
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12,6 12,12 16,14"></polyline>
              </svg>
              ${lang === 'es' ? 'Se consultaron' : 'Checked'} ${result.result.availableSlots?.length || 0} ${lang === 'es' ? 'horarios disponibles' : 'available slots'}
            `;
            
            functionResultsDiv.appendChild(resultDiv);
          }
        });
        
        if (functionResultsDiv.children.length > 0) {
          messageContent.appendChild(functionResultsDiv);
        }
      }
      
      messageDiv.appendChild(messageContent);
      chatbotMessages.appendChild(messageDiv);
      chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    // Función para mostrar indicador de carga
    function showLoading() {
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'message bot-message loading-message';
      loadingDiv.id = 'loading-message';
      
      const messageContent = document.createElement('div');
      messageContent.className = 'message-content';
      messageContent.style.cssText = `
        position: relative;
      `;
      
      // Agregar avatar y nombre del bot
      const botInfo = document.createElement('div');
      botInfo.className = 'bot-info';
      botInfo.style.cssText = `
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 6px;
      `;
      
      const avatar = document.createElement('img');
      avatar.src = '/avatar.png';
      avatar.alt = 'Daniel GPT';
      avatar.style.cssText = `
        width: 20px;
        height: 20px;
        border-radius: 50%;
        object-fit: cover;
      `;
      
      const botName = document.createElement('span');
      botName.textContent = 'Daniel GPT';
      botName.style.cssText = `
        font-size: 12px;
        font-weight: 500;
        color: var(--primary-text);
      `;
      
      botInfo.appendChild(avatar);
      botInfo.appendChild(botName);
      messageContent.appendChild(botInfo);
      
      const loadingDots = document.createElement('div');
      loadingDots.className = 'loading-dots';
      loadingDots.style.cssText = `
        display: flex;
        gap: 4px;
        padding: 12px 16px;
        background: var(--hover-background);
        border-radius: 18px;
        border-bottom-left-radius: 6px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        position: relative;
      `;
      
      // Crear los puntos de carga
      for (let i = 0; i < 3; i++) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        dot.style.cssText = `
          width: 6px;
          height: 6px;
          background: var(--primary-text);
          border-radius: 50%;
          animation: bounce 1.4s infinite ease-in-out both;
          animation-delay: ${i * 0.1}s;
        `;
        loadingDots.appendChild(dot);
      }
      
      // Agregar cola de burbuja
      const tail = document.createElement('div');
      tail.style.cssText = `
        position: absolute;
        left: -8px;
        bottom: 0;
        width: 0;
        height: 0;
        border: 8px solid transparent;
        border-right-color: var(--hover-background);
        border-left: 0;
        border-bottom: 0;
      `;
      loadingDots.appendChild(tail);
      
      messageContent.appendChild(loadingDots);
      loadingDiv.appendChild(messageContent);
      chatbotMessages.appendChild(loadingDiv);
      chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    // Función para ocultar indicador de carga
    function hideLoading() {
      const loadingMessage = document.getElementById('loading-message');
      if (loadingMessage) {
        loadingMessage.remove();
      }
    }

    // Función para enviar mensaje
    async function sendMessage() {
      const message = chatbotInput.value.trim();
      if (!message || isLoading) return;

      isLoading = true;

      // Agregar mensaje del usuario
      addMessage(message, false);
      chatbotInput.value = '';

      // Mostrar indicador de carga
      showLoading();

      try {
        const result = await chatbot.sendMessage(message, 'demo-user');
        
        // Ocultar indicador de carga
        hideLoading();
        
        if (result.success) {
          addMessage(result.reply, true, result.functionResults);
        } else {
          addMessage(translations[lang as keyof typeof translations]?.error || translations.en.error, true, null, true);
        }
      } catch (error) {
        hideLoading();
        addMessage(translations[lang as keyof typeof translations]?.error || translations.en.error, true, null, true);
      }

      isLoading = false;
    }

    // Función para limpiar conversación
    function clearConversation() {
      chatbot.clearConversation();
      
      // Limpiar mensajes existentes
      chatbotMessages.innerHTML = '';
      
      // Crear nuevo mensaje de bienvenida
      const welcomeMessage = document.createElement('div');
      welcomeMessage.className = 'message bot-message';
      
      const messageContent = document.createElement('div');
      messageContent.className = 'message-content';
      messageContent.style.cssText = `
        position: relative;
      `;
      
      // Agregar avatar y nombre del bot
      const botInfo = document.createElement('div');
      botInfo.className = 'bot-info';
      botInfo.style.cssText = `
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 6px;
      `;
      
      const avatar = document.createElement('img');
      avatar.src = '/avatar.png';
      avatar.alt = 'Daniel GPT';
      avatar.style.cssText = `
        width: 20px;
        height: 20px;
        border-radius: 50%;
        object-fit: cover;
      `;
      
      const botName = document.createElement('span');
      botName.textContent = 'Daniel GPT';
      botName.style.cssText = `
        font-size: 12px;
        font-weight: 500;
        color: var(--primary-text);
      `;
      
      botInfo.appendChild(avatar);
      botInfo.appendChild(botName);
      messageContent.appendChild(botInfo);
      
      const messageParagraph = document.createElement('p');
      messageParagraph.textContent = lang === 'es' ? 
        '¡Hola! Soy Daniel GPT, un chatbot desarrollado con arquitectura RAG. Puedo ayudarte con información sobre su perfil profesional y también puedo agendar entrevistas. ¿En qué puedo ayudarte hoy?' :
        'Hello! I\'m Daniel GPT, a chatbot developed with RAG architecture. I can help you with information about Daniel\'s professional profile and also schedule interviews. How can I help you today?';
      messageParagraph.style.cssText = `
        background: var(--hover-background);
        color: var(--black-text);
        border-radius: 18px;
        border-bottom-left-radius: 6px;
        padding: 12px 16px;
        margin: 0;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        position: relative;
      `;
      
      // Agregar cola de burbuja
      const tail = document.createElement('div');
      tail.style.cssText = `
        position: absolute;
        left: -8px;
        bottom: 0;
        width: 0;
        height: 0;
        border: 8px solid transparent;
        border-right-color: var(--hover-background);
        border-bottom: 0;
        border-left: 0;
      `;
      messageParagraph.appendChild(tail);
      
      messageContent.appendChild(messageParagraph);
      welcomeMessage.appendChild(messageContent);
      chatbotMessages.appendChild(welcomeMessage);
      
      // Mostrar mensaje de confirmación
      const notification = document.createElement('div');
      notification.className = 'clear-notification';
      notification.textContent = translations[lang as keyof typeof translations]?.newConversation || translations.en.newConversation;
      chatbotContainer.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // Función para manejar acciones rápidas
    function handleQuickAction(action: string) {
      let message = '';
      switch (action) {
        case 'about':
          message = lang === 'es' ? 'Cuéntame sobre la experiencia de Daniel' : 'Tell me about Daniel\'s experience';
          break;
        case 'schedule':
          message = lang === 'es' ? 'Me gustaría agendar una entrevista' : 'I would like to schedule an interview';
          break;
        case 'availability':
          message = lang === 'es' ? '¿Qué horarios tienes disponibles?' : 'What times do you have available?';
          break;
      }
      
      if (message) {
        chatbotInput.value = message;
        sendMessage();
      }
    }

    // Event listeners
    chatbotToggle.addEventListener('click', toggleChat);
    chatbotClose.addEventListener('click', toggleChat);
    chatbotClear.addEventListener('click', clearConversation);
    chatbotSend.addEventListener('click', sendMessage);
    
    chatbotInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    // Event listeners para botones de acción rápida
    quickActionBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const action = btn.getAttribute('data-action');
        if (action) {
          handleQuickAction(action);
        }
      });
    });

    // Cerrar chat al hacer clic fuera
    document.addEventListener('click', (e) => {
      if (isOpen && !chatbotContainer.contains(e.target as Node)) {
        toggleChat();
      }
    });

    // Cargar historial de conversación si existe
    if (chatbot.hasConversation()) {
      chatbot.getHistory().then(result => {
        if (result.success && result.messages && Array.isArray(result.messages) && result.messages.length > 1) {
          // Limpiar mensaje de bienvenida
          chatbotMessages.innerHTML = '';
          
          // Agregar mensajes del historial
          result.messages.forEach((msg: any) => {
            addMessage(msg.content, msg.role === 'assistant');
          });
        }
      });
    }
  });
</script>

<style>
  .chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    font-family: 'Inter Variable', sans-serif;
  }

  .chatbot-toggle {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    border: 1px solid var(--kbm-border);
    background: var(--background);
    cursor: pointer;
    position: relative;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .chatbot-toggle:hover {
    border-color: var(--darker-hover-background);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .chatbot-toggle.active {
    background: var(--hover-background);
  }

  .chatbot-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
  }

  .chatbot-indicator {
    position: absolute;
    top: -2px;
    right: -2px;
    width: 8px;
    height: 8px;
    background: var(--projects-active);
    border-radius: 50%;
    border: 2px solid var(--background);
  }

  .chatbot-window {
    position: absolute;
    bottom: 70px;
    right: 0;
    width: 320px;
    height: 450px;
    background: var(--background);
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    border: 1px solid var(--kbm-border);
    display: flex;
    flex-direction: column;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all 0.2s ease;
  }

  .chatbot-window.open {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .chatbot-header {
    padding: 16px;
    border-bottom: 1px solid var(--kbm-border);
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .chatbot-header-info {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .chatbot-header-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
  }

  .chatbot-title {
    font-size: 14px;
    font-weight: 500;
    color: var(--black-text);
    margin: 0;
  }

  .chatbot-status {
    font-size: 12px;
    color: var(--primary-text);
  }

  .chatbot-header-actions {
    display: flex;
    gap: 4px;
  }

  .chatbot-clear,
  .chatbot-close {
    width: 28px;
    height: 28px;
    border: none;
    background: transparent;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-text);
    transition: all 0.2s ease;
  }

  .chatbot-clear:hover,
  .chatbot-close:hover {
    background: var(--hover-background);
    color: var(--black-text);
  }

  .chatbot-messages {
    flex: 1;
    padding: 16px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .message {
    display: flex;
    gap: 8px;
    align-items: flex-start;
  }

  .user-message {
    flex-direction: row-reverse;
  }

  .message-avatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
  }

  .message-content {
    max-width: 80%;
    position: relative;
  }

  .message-content p {
    margin: 0;
    padding: 12px 16px;
    border-radius: 18px;
    font-size: 13px;
    line-height: 1.4;
    position: relative;
    word-wrap: break-word;
  }

  .bot-message .message-content p {
    background: var(--hover-background);
    color: var(--black-text);
    border-bottom-left-radius: 6px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .user-message .message-content p {
    background: var(--projects-active);
    color: white;
    border-bottom-right-radius: 6px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .message-content.error p {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  /* Burbujas de chat con cola */
  .bot-message .message-content::before {
    content: '';
    position: absolute;
    left: -8px;
    bottom: 0;
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-right-color: var(--hover-background);
    border-left: 0;
    border-bottom: 0;
  }

  .user-message .message-content::before {
    content: '';
    position: absolute;
    right: -8px;
    bottom: 0;
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-left-color: var(--projects-active);
    border-right: 0;
    border-bottom: 0;
  }

  /* Ajustar espaciado para las burbujas */
  .bot-message {
    margin-right: 20px;
  }

  .user-message {
    margin-left: 20px;
  }

  .function-results {
    margin-top: 8px;
    padding: 8px 12px;
    background: rgba(59, 130, 246, 0.08);
    border-radius: 12px;
    font-size: 11px;
    border: 1px solid rgba(59, 130, 246, 0.15);
  }

  .function-result {
    display: flex;
    align-items: center;
    gap: 6px;
    margin-bottom: 4px;
  }

  .function-result:last-child {
    margin-bottom: 0;
  }

  .function-result.success {
    color: #059669;
  }

  .function-result.info {
    color: #2563eb;
  }

  .loading-message .message-content {
    position: relative;
  }

  .loading-message .message-content::before {
    content: '';
    position: absolute;
    left: -8px;
    bottom: 0;
    width: 0;
    height: 0;
    border: 8px solid transparent;
    border-right-color: var(--hover-background);
    border-left: 0;
    border-bottom: 0;
  }

  .loading-message .loading-dots {
    display: flex;
    gap: 4px;
    padding: 12px 16px;
    background: var(--hover-background);
    border-radius: 18px;
    border-bottom-left-radius: 6px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .dot {
    width: 6px;
    height: 6px;
    background: var(--primary-text);
    border-radius: 50%;
    animation: bounce 1.4s infinite ease-in-out both;
  }

  .dot:nth-child(1) { animation-delay: -0.32s; }
  .dot:nth-child(2) { animation-delay: -0.16s; }

  @keyframes bounce {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }

  .chatbot-quick-actions {
    padding: 12px 16px;
    border-bottom: 1px solid var(--kbm-border);
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  .quick-action-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 6px 10px;
    background: var(--hover-background);
    border: 1px solid var(--kbm-border);
    border-radius: 16px;
    font-size: 11px;
    color: var(--black-text);
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .quick-action-btn:hover {
    background: var(--darker-hover-background);
    border-color: var(--projects-active);
  }

  .chatbot-input-area {
    padding: 16px;
    border-top: 1px solid var(--kbm-border);
  }

  .chatbot-input-container {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .chatbot-input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid var(--kbm-border);
    border-radius: 6px;
    background: var(--background);
    color: var(--black-text);
    font-size: 13px;
    outline: none;
    transition: border-color 0.2s ease;
  }

  .chatbot-input:focus {
    border-color: var(--projects-active);
  }

  .chatbot-input::placeholder {
    color: var(--primary-text);
  }

  .chatbot-send {
    width: 32px;
    height: 32px;
    border: none;
    background: var(--projects-active);
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    transition: all 0.2s ease;
  }

  .chatbot-send:hover {
    background: var(--darker-hover-background);
  }

  .chatbot-send:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .clear-notification {
    position: absolute;
    top: -40px;
    right: 0;
    background: var(--projects-active);
    color: white;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 12px;
    animation: slideIn 0.3s ease;
  }

  @keyframes slideIn {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Scrollbar personalizado */
  .chatbot-messages::-webkit-scrollbar {
    width: 4px;
  }

  .chatbot-messages::-webkit-scrollbar-track {
    background: transparent;
  }

  .chatbot-messages::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb);
    border-radius: 2px;
  }

  .chatbot-messages::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover);
  }

  /* Responsive - Solucionar interferencia en móviles */
  @media (max-width: 768px) {
    .chatbot-container {
      bottom: 80px;
      right: 15px;
    }

    .chatbot-window {
      width: calc(100vw - 30px);
      height: 400px;
      right: 0;
      bottom: 60px;
    }

    .chatbot-toggle {
      width: 44px;
      height: 44px;
    }

    .chatbot-avatar {
      width: 28px;
      height: 28px;
    }

    .chatbot-indicator {
      width: 6px;
      height: 6px;
    }

    .chatbot-quick-actions {
      padding: 10px 12px;
    }

    .quick-action-btn {
      font-size: 10px;
      padding: 5px 8px;
    }
  }

  /* Ocultar en impresión */
  @media print {
    .chatbot-container {
      display: none !important;
    }
  }
</style>
